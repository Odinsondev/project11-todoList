(()=>{"use strict";var n={874:(n,e,t)=>{t.d(e,{A:()=>c});var o=t(354),r=t.n(o),i=t(314),a=t.n(i)()(r());a.push([n.id,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}',"",{version:3,sources:["webpack://./src/normalize.css"],names:[],mappings:"AAAA,2EAA2E;;AAE3E;+EAC+E;;AAE/E;;;EAGE;;CAED;EACC,iBAAiB,EAAE,MAAM;EACzB,8BAA8B,EAAE,MAAM;AACxC;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,SAAS,EAAE,MAAM;EACjB,iBAAiB,EAAE,MAAM;AAC3B;;AAEA;;;EAGE;;AAEF;EACE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,6BAA6B;AAC/B;;AAEA;;;EAGE;;AAEF;EACE,mBAAmB,EAAE,MAAM;EAC3B,0BAA0B,EAAE,MAAM;EAClC,iCAAiC,EAAE,MAAM;AAC3C;;AAEA;;EAEE;;AAEF;;EAEE,mBAAmB;AACrB;;AAEA;;;EAGE;;AAEF;;;EAGE,iCAAiC,EAAE,MAAM;EACzC,cAAc,EAAE,MAAM;AACxB;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE,oBAAoB,EAAE,MAAM;EAC5B,eAAe,EAAE,MAAM;EACvB,iBAAiB,EAAE,MAAM;EACzB,SAAS,EAAE,MAAM;AACnB;;AAEA;;;EAGE;;AAEF;QACQ,MAAM;EACZ,iBAAiB;AACnB;;AAEA;;;EAGE;;AAEF;SACS,MAAM;EACb,oBAAoB;AACtB;;AAEA;;EAEE;;AAEF;;;;EAIE,0BAA0B;AAC5B;;AAEA;;EAEE;;AAEF;;;;EAIE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;;EAEE;;AAEF;;;;EAIE,8BAA8B;AAChC;;AAEA;;EAEE;;AAEF;EACE,8BAA8B;AAChC;;AAEA;;;;;EAKE;;AAEF;EACE,sBAAsB,EAAE,MAAM;EAC9B,cAAc,EAAE,MAAM;EACtB,cAAc,EAAE,MAAM;EACtB,eAAe,EAAE,MAAM;EACvB,UAAU,EAAE,MAAM;EAClB,mBAAmB,EAAE,MAAM;AAC7B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;EAGE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,oBAAoB,EAAE,MAAM;AAC9B;;AAEA;;EAEE;;AAEF;EACE,wBAAwB;AAC1B;;AAEA;;;EAGE;;AAEF;EACE,0BAA0B,EAAE,MAAM;EAClC,aAAa,EAAE,MAAM;AACvB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,aAAa;AACf;;AAEA;;EAEE;;AAEF;EACE,aAAa;AACf",sourcesContent:['/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\n html {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}'],sourceRoot:""}]);const c=a},208:(n,e,t)=>{t.d(e,{A:()=>g});var o=t(354),r=t.n(o),i=t(314),a=t.n(i),c=t(417),d=t.n(c),s=new URL(t(627),t.b),l=new URL(t(363),t.b),u=new URL(t(477),t.b),A=new URL(t(848),t.b),m=a()(r()),h=d()(s),p=d()(l),f=d()(u),E=d()(A);m.push([n.id,`html, body {\n  height: 100%;\n}\n\nbody {\n  font-family: Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background-color: var(--background5, white);\n}\n\n@font-face {\n  font-family: 'Ubuntu';\n  src: url(${h}) format('woff2'),\n    url(${p}) format('woff');\n  font-style: normal;\n}\n\n:root {\n  --background1: rgb(211, 220, 227);\n  --background2: rgb(208, 197, 187);\n  --background3: rgb(147, 128, 115);\n  --background4: rgb(190, 223, 140);\n  --background5: rgb(247, 129, 140);\n  --text1: rgb(0, 0, 0);\n  --text2: rgb(0, 0, 0);\n  --text-footer: rgb(0, 0, 0);\n  /* font-size: 16px; */   /* Disables browser font size setting */\n}\n\nbody {\n  display: grid;\n  grid-template: 1fr 4fr 40px / 1fr 4fr;\n}\n\nheader {\n  grid-column: 1 / 3;\n  grid-row: 1 / 2;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background-color: var(--background3);\n}\n\n.main-title {\n  font-size: 4rem;\n  margin: 1rem;\n  color: var(--background5);\n  justify-self: center;\n  font-family: "Protest Guerrilla";\n}\n\nul,\nli {\n  list-style: none;\n  padding: 0;\n}\n\ninput,\nlabel {\n  display: block;\n}\n\nlabel {\n  margin: 2vh 0 2vh 0;\n}\n\n\n/* content1 */\n#content1 {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n\n  margin: 0.5vw;\n  background-color: var(--background2);\n  border-radius: 5px;\n  overflow: auto;\n}\n\n#project-buttons {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\n#new-project-button,\n#delete-project-button {\n  margin: 5%;\n}\n\n\n/* new project form */\n#new-project-form {\n  height: auto;\n  width: auto;\n  background-color: var(--background1);\n  border-radius: 5px;\n  margin: 5%;\n}\n\n#new-project-form>ul {\n  padding: 1.5vw;\n}\n\n#project-title {\n  width: 97%;\n}\n\n#project-li2 {\n  display: flex;\n  justify-content: space-between;\n  \n  margin: 2vh 0 1vh 0;\n}\n\n#project-submit-button,\n#project-cancel-button {\nmargin: 3vh 0 0 0;\n}\n\n\n/* projects */\n.project-button {\n  height: 40px;\n  width: 90%;\n  background-color: rgb(210, 218, 196);\n  border-style: none;\n  border: 2px solid var(--background5);\n  border-radius: 5px;\n  margin: 5%;\n  overflow: auto;\n}\n\n.selected-project {\n  background-color: var(--background4);\n}\n\n\n/* content2 */\n#content2 {\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n\n  margin: 0.5vw;\n  background-color: var(--background2);\n  border-radius: 5px;\n  overflow: auto;\n}\n\n#new-task-button {\n  margin: 1%;\n}\n\n\n/* new/edit task form */\n#new-task-form {\n  height: auto;\n  width: auto;\n  background-color: var(--background1);\n  border-radius: 5px;\n  margin: 1%;\n}\n\n#new-task-form>ul {\n  padding: 1.5vw;\n}\n\n#edit-task-form {\n  height: auto;\n  width: auto;\n  background-color: var(--background1);\n  border-radius: 5px;\n  margin: 1%;\n}\n\n#edit-task-form>ul {\n  padding: 1.5vw;\n}\n\n#li1 {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  margin: 1vh 0 2vh 0;\n}\n\n#li2 {\n  margin: 4vh 0 2vh 0;\n}\n\n#li4 {\n  margin: 4vh 0 2vh 0;\n}\n\n#title-div,\n#date-div,\n#low-prio-div,\n#norm-prio-div,\n#high-prio-div {\n  display: flex;\n}\n\n#title-div>label,\n#date-div>label,\n#low-prio-div>label,\n#norm-prio-div>label,\n#high-prio-div>label {\n  margin-right: 1vw;\n}\n\n#title-div {\n  width: 50vw;\n}\n\n#title {\n  width: 100%;\n}\n\n#description {\n  width: 99.5%;\n}\n\n#priority-fieldset {\n  display: flex;\n  justify-content: space-around;\n}\n\n#li5 {\n  display: flex;\n  \n  margin: 2vh 0 1vh 0;\n}\n\n#submit-button,\n#close-form-button {\nmargin: 3vh 2vw 0 0;\n}\n\n/* new task notifications */\n.notification-area,\n.notification-text {\n  opacity: 1;\n  transition: opacity 1000ms;\n}\n\n.notification-area {\n  height: auto;\n  width: auto;\n  background-color: var(--background4);\n  border: 2px solid var(--background5);\n  border-radius: 5px;\n  margin: 1%;\n}\n\n.notification-text {\n  margin: clamp(0.25rem, 1vh, 1rem);  \n}\n\n\n/* tasks */\n.task {\n  background-color: var(--background4);\n  border: 2px solid var(--background5);\n  border-radius: 5px;\n  margin: 1%;\n  padding: 1vh 1.5vw 1vh 1.5vw;\n}\n\n.task>p,\n.task>div>p,\n.task>div>div>p {\n  margin: clamp(0.25rem, 1vh, 1rem);\n}\n\n.task-top-div {\n  display: flex;\n  justify-content: space-between;\n}\n\n.task-top-left-div {\n  display: flex;\n\n  max-width: 70%;\n  overflow: auto;\n}\n\n.task-top-right-div {\n  display: flex;\n}\n\n.task-title,\n.task-due-date {\n  padding-top: 3px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task-due-date {\n  padding-right: 2vw;\n}\n\n.task-top-right-div>button:hover {\n  background-color: rgb(184, 174, 165);\n}\n\n.task-top-right-div>button:active {\n  background-color: rgb(159, 150, 142);\n}\n\n.task-edit-button {\n  height: 25px;\n  min-width: 25px;\n  background-image: url(${f});\n  margin: clamp(0.25rem, 1vh, 1rem);\n  border-style: none;\n  border-radius: 3px;\n  background-color: var(--background2);\n}\n\n.task-delete-button {\n  height: 25px;\n  min-width: 25px;\n  background-image: url(${E});\n  margin: clamp(0.25rem, 1vh, 1rem);\n  border-style: none;\n  border-radius: 3px;\n  background-color: var(--background2);\n}\n\nfooter {\n  grid-column: 1 / 3;\n  grid-row: 3 / 4;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background-color: var(--background3);\n  height: 40px;\n  font-size: 1rem;\n  color: var(--text-footer);\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;AACd;;AAEA;EACE,yFAAyF;EACzF,2CAA2C;AAC7C;;AAEA;EACE,qBAAqB;EACrB;0DAC2D;EAC3D,kBAAkB;AACpB;;AAEA;EACE,iCAAiC;EACjC,iCAAiC;EACjC,iCAAiC;EACjC,iCAAiC;EACjC,iCAAiC;EACjC,qBAAqB;EACrB,qBAAqB;EACrB,2BAA2B;EAC3B,qBAAqB,IAAI,uCAAuC;AAClE;;AAEA;EACE,aAAa;EACb,qCAAqC;AACvC;;AAEA;EACE,kBAAkB;EAClB,eAAe;;EAEf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;;EAEnB,oCAAoC;AACtC;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,yBAAyB;EACzB,oBAAoB;EACpB,gCAAgC;AAClC;;AAEA;;EAEE,gBAAgB;EAChB,UAAU;AACZ;;AAEA;;EAEE,cAAc;AAChB;;AAEA;EACE,mBAAmB;AACrB;;;AAGA,aAAa;AACb;EACE,kBAAkB;EAClB,eAAe;;EAEf,aAAa;EACb,oCAAoC;EACpC,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,eAAe;AACjB;;AAEA;;EAEE,UAAU;AACZ;;;AAGA,qBAAqB;AACrB;EACE,YAAY;EACZ,WAAW;EACX,oCAAoC;EACpC,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,8BAA8B;;EAE9B,mBAAmB;AACrB;;AAEA;;AAEA,iBAAiB;AACjB;;;AAGA,aAAa;AACb;EACE,YAAY;EACZ,UAAU;EACV,oCAAoC;EACpC,kBAAkB;EAClB,oCAAoC;EACpC,kBAAkB;EAClB,UAAU;EACV,cAAc;AAChB;;AAEA;EACE,oCAAoC;AACtC;;;AAGA,aAAa;AACb;EACE,kBAAkB;EAClB,eAAe;;EAEf,aAAa;EACb,oCAAoC;EACpC,kBAAkB;EAClB,cAAc;AAChB;;AAEA;EACE,UAAU;AACZ;;;AAGA,uBAAuB;AACvB;EACE,YAAY;EACZ,WAAW;EACX,oCAAoC;EACpC,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,oCAAoC;EACpC,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,eAAe;;EAEf,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;;;;EAKE,aAAa;AACf;;AAEA;;;;;EAKE,iBAAiB;AACnB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,aAAa;;EAEb,mBAAmB;AACrB;;AAEA;;AAEA,mBAAmB;AACnB;;AAEA,2BAA2B;AAC3B;;EAEE,UAAU;EACV,0BAA0B;AAC5B;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,oCAAoC;EACpC,oCAAoC;EACpC,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,iCAAiC;AACnC;;;AAGA,UAAU;AACV;EACE,oCAAoC;EACpC,oCAAoC;EACpC,kBAAkB;EAClB,UAAU;EACV,4BAA4B;AAC9B;;AAEA;;;EAGE,iCAAiC;AACnC;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,aAAa;;EAEb,cAAc;EACd,cAAc;AAChB;;AAEA;EACE,aAAa;AACf;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,yDAAuC;EACvC,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,oCAAoC;AACtC;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,yDAAyC;EACzC,iCAAiC;EACjC,kBAAkB;EAClB,kBAAkB;EAClB,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;EAClB,eAAe;;EAEf,aAAa;EACb,uBAAuB;EACvB,mBAAmB;;EAEnB,oCAAoC;EACpC,YAAY;EACZ,eAAe;EACf,yBAAyB;AAC3B",sourcesContent:["html, body {\n  height: 100%;\n}\n\nbody {\n  font-family: Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  background-color: var(--background5, white);\n}\n\n@font-face {\n  font-family: 'Ubuntu';\n  src: url('./fonts/ubuntu-regular-webfont.woff2') format('woff2'),\n    url('./fonts/ubuntu-regular-webfont.woff') format('woff');\n  font-style: normal;\n}\n\n:root {\n  --background1: rgb(211, 220, 227);\n  --background2: rgb(208, 197, 187);\n  --background3: rgb(147, 128, 115);\n  --background4: rgb(190, 223, 140);\n  --background5: rgb(247, 129, 140);\n  --text1: rgb(0, 0, 0);\n  --text2: rgb(0, 0, 0);\n  --text-footer: rgb(0, 0, 0);\n  /* font-size: 16px; */   /* Disables browser font size setting */\n}\n\nbody {\n  display: grid;\n  grid-template: 1fr 4fr 40px / 1fr 4fr;\n}\n\nheader {\n  grid-column: 1 / 3;\n  grid-row: 1 / 2;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background-color: var(--background3);\n}\n\n.main-title {\n  font-size: 4rem;\n  margin: 1rem;\n  color: var(--background5);\n  justify-self: center;\n  font-family: \"Protest Guerrilla\";\n}\n\nul,\nli {\n  list-style: none;\n  padding: 0;\n}\n\ninput,\nlabel {\n  display: block;\n}\n\nlabel {\n  margin: 2vh 0 2vh 0;\n}\n\n\n/* content1 */\n#content1 {\n  grid-column: 1 / 2;\n  grid-row: 2 / 3;\n\n  margin: 0.5vw;\n  background-color: var(--background2);\n  border-radius: 5px;\n  overflow: auto;\n}\n\n#project-buttons {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n}\n\n#new-project-button,\n#delete-project-button {\n  margin: 5%;\n}\n\n\n/* new project form */\n#new-project-form {\n  height: auto;\n  width: auto;\n  background-color: var(--background1);\n  border-radius: 5px;\n  margin: 5%;\n}\n\n#new-project-form>ul {\n  padding: 1.5vw;\n}\n\n#project-title {\n  width: 97%;\n}\n\n#project-li2 {\n  display: flex;\n  justify-content: space-between;\n  \n  margin: 2vh 0 1vh 0;\n}\n\n#project-submit-button,\n#project-cancel-button {\nmargin: 3vh 0 0 0;\n}\n\n\n/* projects */\n.project-button {\n  height: 40px;\n  width: 90%;\n  background-color: rgb(210, 218, 196);\n  border-style: none;\n  border: 2px solid var(--background5);\n  border-radius: 5px;\n  margin: 5%;\n  overflow: auto;\n}\n\n.selected-project {\n  background-color: var(--background4);\n}\n\n\n/* content2 */\n#content2 {\n  grid-column: 2 / 3;\n  grid-row: 2 / 3;\n\n  margin: 0.5vw;\n  background-color: var(--background2);\n  border-radius: 5px;\n  overflow: auto;\n}\n\n#new-task-button {\n  margin: 1%;\n}\n\n\n/* new/edit task form */\n#new-task-form {\n  height: auto;\n  width: auto;\n  background-color: var(--background1);\n  border-radius: 5px;\n  margin: 1%;\n}\n\n#new-task-form>ul {\n  padding: 1.5vw;\n}\n\n#edit-task-form {\n  height: auto;\n  width: auto;\n  background-color: var(--background1);\n  border-radius: 5px;\n  margin: 1%;\n}\n\n#edit-task-form>ul {\n  padding: 1.5vw;\n}\n\n#li1 {\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n\n  margin: 1vh 0 2vh 0;\n}\n\n#li2 {\n  margin: 4vh 0 2vh 0;\n}\n\n#li4 {\n  margin: 4vh 0 2vh 0;\n}\n\n#title-div,\n#date-div,\n#low-prio-div,\n#norm-prio-div,\n#high-prio-div {\n  display: flex;\n}\n\n#title-div>label,\n#date-div>label,\n#low-prio-div>label,\n#norm-prio-div>label,\n#high-prio-div>label {\n  margin-right: 1vw;\n}\n\n#title-div {\n  width: 50vw;\n}\n\n#title {\n  width: 100%;\n}\n\n#description {\n  width: 99.5%;\n}\n\n#priority-fieldset {\n  display: flex;\n  justify-content: space-around;\n}\n\n#li5 {\n  display: flex;\n  \n  margin: 2vh 0 1vh 0;\n}\n\n#submit-button,\n#close-form-button {\nmargin: 3vh 2vw 0 0;\n}\n\n/* new task notifications */\n.notification-area,\n.notification-text {\n  opacity: 1;\n  transition: opacity 1000ms;\n}\n\n.notification-area {\n  height: auto;\n  width: auto;\n  background-color: var(--background4);\n  border: 2px solid var(--background5);\n  border-radius: 5px;\n  margin: 1%;\n}\n\n.notification-text {\n  margin: clamp(0.25rem, 1vh, 1rem);  \n}\n\n\n/* tasks */\n.task {\n  background-color: var(--background4);\n  border: 2px solid var(--background5);\n  border-radius: 5px;\n  margin: 1%;\n  padding: 1vh 1.5vw 1vh 1.5vw;\n}\n\n.task>p,\n.task>div>p,\n.task>div>div>p {\n  margin: clamp(0.25rem, 1vh, 1rem);\n}\n\n.task-top-div {\n  display: flex;\n  justify-content: space-between;\n}\n\n.task-top-left-div {\n  display: flex;\n\n  max-width: 70%;\n  overflow: auto;\n}\n\n.task-top-right-div {\n  display: flex;\n}\n\n.task-title,\n.task-due-date {\n  padding-top: 3px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task-due-date {\n  padding-right: 2vw;\n}\n\n.task-top-right-div>button:hover {\n  background-color: rgb(184, 174, 165);\n}\n\n.task-top-right-div>button:active {\n  background-color: rgb(159, 150, 142);\n}\n\n.task-edit-button {\n  height: 25px;\n  min-width: 25px;\n  background-image: url(./icons/edit.svg);\n  margin: clamp(0.25rem, 1vh, 1rem);\n  border-style: none;\n  border-radius: 3px;\n  background-color: var(--background2);\n}\n\n.task-delete-button {\n  height: 25px;\n  min-width: 25px;\n  background-image: url(./icons/delete.svg);\n  margin: clamp(0.25rem, 1vh, 1rem);\n  border-style: none;\n  border-radius: 3px;\n  background-color: var(--background2);\n}\n\nfooter {\n  grid-column: 1 / 3;\n  grid-row: 3 / 4;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background-color: var(--background3);\n  height: 40px;\n  font-size: 1rem;\n  color: var(--text-footer);\n}\n"],sourceRoot:""}]);const g=m},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(a[d]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},417:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var d=n[c],s=o.base?d[0]+o.base:d[0],l=i[s]||0,u="".concat(s," ").concat(l);i[s]=l+1;var A=t(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var h=r(m,o);o.byIndex=c,e.splice(c,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var d=o(n,r),s=0;s<i.length;s++){var l=t(i[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=d}}},659:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},363:(n,e,t)=>{n.exports=t.p+"b8016ea17070b58ac7d5.woff"},627:(n,e,t)=>{n.exports=t.p+"ac8b87245929a6563eed.woff2"},848:(n,e,t)=>{n.exports=t.p+"a55b53a19010d8e40c62.svg"},477:(n,e,t)=>{n.exports=t.p+"5d19b3c0f36b795bfbe1.svg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!n||!/^http(s?):/.test(n));)n=o[r--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=t(72),e=t.n(n),o=t(825),r=t.n(o),i=t(659),a=t.n(i),c=t(56),d=t.n(c),s=t(540),l=t.n(s),u=t(113),A=t.n(u),m=t(874),h={};h.styleTagTransform=A(),h.setAttributes=d(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),e()(m.A,h),m.A&&m.A.locals&&m.A.locals;var p=t(208),f={};function E(){console.log("Updating local storage");const n=JSON.stringify(g);localStorage.storedProjectList=n}f.styleTagTransform=A(),f.setAttributes=d(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),e()(p.A,f),p.A&&p.A.locals&&p.A.locals;let g=[];function b(){const n=function(){const n=document.getElementById("project-title").value,e={};return e.title=n,e.array=[],e}();g.push(n),E()}!function(){if(console.log("Connecting to local storage"),null===localStorage.getItem("storedProjectList"))console.log("No data stored"),g.push({title:"Miscellanious Tasks",array:[]});else{console.log("Retrieving data");const n=localStorage.getItem("storedProjectList"),e=JSON.parse(n);g=e}}();const C=document.getElementById("notification-container");let w=0,y="";function v(){y=g[w].array}function k(){w=oe,v()}function B(){const n=document.getElementById("title").value,e=document.getElementById("description").value,t=document.getElementById("due-date").value;let o="";1==document.getElementById("low-priority").checked?o=document.getElementById("low-priority").value:1==document.getElementById("normal-priority").checked?o=document.getElementById("normal-priority").value:1==document.getElementById("high-priority").checked&&(o=document.getElementById("high-priority").value);const r={};return r.title=n,r.description=e,r.dueDate=t,r.priority=o,r.status="not complete",r}v(),function(){if(null===localStorage.getItem("storedProjectList")){const n={title:"Get Back to the Future",description:"Harness the power of lightning to power the DeLorean",dueDate:"1955-11-05",priority:"normal"};y.push(n)}}();const x=document.getElementById("task-list-container"),M=document.getElementById("form-container");function S(){M.innerHTML=""}const D={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function I(n){return(e={})=>{const t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const j={date:I({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:I({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:I({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},T={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function F(n){return(e,t)=>{let o;if("formatting"===(t?.context?String(t.context):"standalone")&&n.formattingValues){const e=n.defaultFormattingWidth||n.defaultWidth,r=t?.width?String(t.width):e;o=n.formattingValues[r]||n.formattingValues[e]}else{const e=n.defaultWidth,r=t?.width?String(t.width):n.defaultWidth;o=n.values[r]||n.values[e]}return o[n.argumentCallback?n.argumentCallback(e):e]}}const z={ordinalNumber:(n,e)=>{const t=Number(n),o=t%100;if(o>20||o<10)switch(o%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:F({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:F({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:n=>n-1}),month:F({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:F({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:F({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Y(n){return(e,t={})=>{const o=t.width,r=o&&n.matchPatterns[o]||n.matchPatterns[n.defaultMatchWidth],i=e.match(r);if(!i)return null;const a=i[0],c=o&&n.parsePatterns[o]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?function(n,e){for(let e=0;e<n.length;e++)if(n[e].test(a))return e}(c):function(n,e){for(const e in n)if(Object.prototype.hasOwnProperty.call(n,e)&&n[e].test(a))return e}(c);let s;return s=n.valueCallback?n.valueCallback(d):d,s=t.valueCallback?t.valueCallback(s):s,{value:s,rest:e.slice(a.length)}}}const N={ordinalNumber:(P={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:n=>parseInt(n,10)},(n,e={})=>{const t=n.match(P.matchPattern);if(!t)return null;const o=t[0],r=n.match(P.parsePattern);if(!r)return null;let i=P.valueCallback?P.valueCallback(r[0]):r[0];return i=e.valueCallback?e.valueCallback(i):i,{value:i,rest:n.slice(o.length)}}),era:Y({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Y({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:n=>n+1}),month:Y({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Y({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Y({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};var P;const L={code:"en-US",formatDistance:(n,e,t)=>{let o;const r=D[n];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),t?.addSuffix?t.comparison&&t.comparison>0?"in "+o:o+" ago":o},formatLong:j,formatRelative:(n,e,t,o)=>T[n],localize:z,match:N,options:{weekStartsOn:0,firstWeekContainsDate:1}};let U={};function W(){return U}Math.pow(10,8);const O=6048e5,H=864e5;function Z(n){const e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new n.constructor(+n):"number"==typeof n||"[object Number]"===e||"string"==typeof n||"[object String]"===e?new Date(n):new Date(NaN)}function R(n){const e=Z(n);return e.setHours(0,0,0,0),e}function q(n){const e=Z(n),t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),+n-+t}function $(n,e){return n instanceof Date?new n.constructor(e):new Date(e)}function G(n){const e=Z(n);return function(n,e){const t=R(n),o=R(e),r=+t-q(t),i=+o-q(o);return Math.round((r-i)/H)}(e,function(n){const e=Z(n),t=$(n,0);return t.setFullYear(e.getFullYear(),0,1),t.setHours(0,0,0,0),t}(e))+1}function X(n,e){const t=W(),o=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??t.weekStartsOn??t.locale?.options?.weekStartsOn??0,r=Z(n),i=r.getDay(),a=(i<o?7:0)+i-o;return r.setDate(r.getDate()-a),r.setHours(0,0,0,0),r}function Q(n){return X(n,{weekStartsOn:1})}function J(n){const e=Z(n),t=e.getFullYear(),o=$(n,0);o.setFullYear(t+1,0,4),o.setHours(0,0,0,0);const r=Q(o),i=$(n,0);i.setFullYear(t,0,4),i.setHours(0,0,0,0);const a=Q(i);return e.getTime()>=r.getTime()?t+1:e.getTime()>=a.getTime()?t:t-1}function V(n){const e=Z(n),t=+Q(e)-+function(n){const e=J(n),t=$(n,0);return t.setFullYear(e,0,4),t.setHours(0,0,0,0),Q(t)}(e);return Math.round(t/O)+1}function K(n,e){const t=Z(n),o=t.getFullYear(),r=W(),i=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,a=$(n,0);a.setFullYear(o+1,0,i),a.setHours(0,0,0,0);const c=X(a,e),d=$(n,0);d.setFullYear(o,0,i),d.setHours(0,0,0,0);const s=X(d,e);return t.getTime()>=c.getTime()?o+1:t.getTime()>=s.getTime()?o:o-1}function _(n,e){const t=Z(n),o=+X(t,e)-+function(n,e){const t=W(),o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??t.firstWeekContainsDate??t.locale?.options?.firstWeekContainsDate??1,r=K(n,e),i=$(n,0);return i.setFullYear(r,0,o),i.setHours(0,0,0,0),X(i,e)}(t,e);return Math.round(o/O)+1}function nn(n,e){return(n<0?"-":"")+Math.abs(n).toString().padStart(e,"0")}const en={y(n,e){const t=n.getFullYear(),o=t>0?t:1-t;return nn("yy"===e?o%100:o,e.length)},M(n,e){const t=n.getMonth();return"M"===e?String(t+1):nn(t+1,2)},d:(n,e)=>nn(n.getDate(),e.length),a(n,e){const t=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.toUpperCase();case"aaa":return t;case"aaaaa":return t[0];default:return"am"===t?"a.m.":"p.m."}},h:(n,e)=>nn(n.getHours()%12||12,e.length),H:(n,e)=>nn(n.getHours(),e.length),m:(n,e)=>nn(n.getMinutes(),e.length),s:(n,e)=>nn(n.getSeconds(),e.length),S(n,e){const t=e.length,o=n.getMilliseconds();return nn(Math.trunc(o*Math.pow(10,t-3)),e.length)}},tn={G:function(n,e,t){const o=n.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(o,{width:"abbreviated"});case"GGGGG":return t.era(o,{width:"narrow"});default:return t.era(o,{width:"wide"})}},y:function(n,e,t){if("yo"===e){const e=n.getFullYear(),o=e>0?e:1-e;return t.ordinalNumber(o,{unit:"year"})}return en.y(n,e)},Y:function(n,e,t,o){const r=K(n,o),i=r>0?r:1-r;return"YY"===e?nn(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):nn(i,e.length)},R:function(n,e){return nn(J(n),e.length)},u:function(n,e){return nn(n.getFullYear(),e.length)},Q:function(n,e,t){const o=Math.ceil((n.getMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return nn(o,2);case"Qo":return t.ordinalNumber(o,{unit:"quarter"});case"QQQ":return t.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(o,{width:"narrow",context:"formatting"});default:return t.quarter(o,{width:"wide",context:"formatting"})}},q:function(n,e,t){const o=Math.ceil((n.getMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return nn(o,2);case"qo":return t.ordinalNumber(o,{unit:"quarter"});case"qqq":return t.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(o,{width:"narrow",context:"standalone"});default:return t.quarter(o,{width:"wide",context:"standalone"})}},M:function(n,e,t){const o=n.getMonth();switch(e){case"M":case"MM":return en.M(n,e);case"Mo":return t.ordinalNumber(o+1,{unit:"month"});case"MMM":return t.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(o,{width:"narrow",context:"formatting"});default:return t.month(o,{width:"wide",context:"formatting"})}},L:function(n,e,t){const o=n.getMonth();switch(e){case"L":return String(o+1);case"LL":return nn(o+1,2);case"Lo":return t.ordinalNumber(o+1,{unit:"month"});case"LLL":return t.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(o,{width:"narrow",context:"standalone"});default:return t.month(o,{width:"wide",context:"standalone"})}},w:function(n,e,t,o){const r=_(n,o);return"wo"===e?t.ordinalNumber(r,{unit:"week"}):nn(r,e.length)},I:function(n,e,t){const o=V(n);return"Io"===e?t.ordinalNumber(o,{unit:"week"}):nn(o,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getDate(),{unit:"date"}):en.d(n,e)},D:function(n,e,t){const o=G(n);return"Do"===e?t.ordinalNumber(o,{unit:"dayOfYear"}):nn(o,e.length)},E:function(n,e,t){const o=n.getDay();switch(e){case"E":case"EE":case"EEE":return t.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},e:function(n,e,t,o){const r=n.getDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return nn(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},c:function(n,e,t,o){const r=n.getDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return nn(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(r,{width:"narrow",context:"standalone"});case"cccccc":return t.day(r,{width:"short",context:"standalone"});default:return t.day(r,{width:"wide",context:"standalone"})}},i:function(n,e,t){const o=n.getDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return nn(r,e.length);case"io":return t.ordinalNumber(r,{unit:"day"});case"iii":return t.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},a:function(n,e,t){const o=n.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(o,{width:"narrow",context:"formatting"});default:return t.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(n,e,t){const o=n.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){const o=n.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){let e=n.getHours()%12;return 0===e&&(e=12),t.ordinalNumber(e,{unit:"hour"})}return en.h(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getHours(),{unit:"hour"}):en.H(n,e)},K:function(n,e,t){const o=n.getHours()%12;return"Ko"===e?t.ordinalNumber(o,{unit:"hour"}):nn(o,e.length)},k:function(n,e,t){let o=n.getHours();return 0===o&&(o=24),"ko"===e?t.ordinalNumber(o,{unit:"hour"}):nn(o,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getMinutes(),{unit:"minute"}):en.m(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getSeconds(),{unit:"second"}):en.s(n,e)},S:function(n,e){return en.S(n,e)},X:function(n,e,t){const o=n.getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return rn(o);case"XXXX":case"XX":return an(o);default:return an(o,":")}},x:function(n,e,t){const o=n.getTimezoneOffset();switch(e){case"x":return rn(o);case"xxxx":case"xx":return an(o);default:return an(o,":")}},O:function(n,e,t){const o=n.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+on(o,":");default:return"GMT"+an(o,":")}},z:function(n,e,t){const o=n.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+on(o,":");default:return"GMT"+an(o,":")}},t:function(n,e,t){return nn(Math.trunc(n.getTime()/1e3),e.length)},T:function(n,e,t){return nn(n.getTime(),e.length)}};function on(n,e=""){const t=n>0?"-":"+",o=Math.abs(n),r=Math.trunc(o/60),i=o%60;return 0===i?t+String(r):t+String(r)+e+nn(i,2)}function rn(n,e){return n%60==0?(n>0?"-":"+")+nn(Math.abs(n)/60,2):an(n,e)}function an(n,e=""){const t=n>0?"-":"+",o=Math.abs(n);return t+nn(Math.trunc(o/60),2)+e+nn(o%60,2)}const cn=(n,e)=>{switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},dn=(n,e)=>{switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},sn={p:dn,P:(n,e)=>{const t=n.match(/(P+)(p+)?/)||[],o=t[1],r=t[2];if(!r)return cn(n,e);let i;switch(o){case"P":i=e.dateTime({width:"short"});break;case"PP":i=e.dateTime({width:"medium"});break;case"PPP":i=e.dateTime({width:"long"});break;default:i=e.dateTime({width:"full"})}return i.replace("{{date}}",cn(o,e)).replace("{{time}}",dn(r,e))}},ln=/^D+$/,un=/^Y+$/,An=["D","DD","YY","YYYY"];function mn(n){if(!(e=n,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof n))return!1;var e;const t=Z(n);return!isNaN(Number(t))}const hn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,pn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fn=/^'([^]*?)'?$/,En=/''/g,gn=/[a-zA-Z]/;function bn(n){const e=n.match(fn);return e?e[1].replace(En,"'"):n}function Cn(n,e,t){const o=function(n,e,t){return new Intl.DateTimeFormat(t?[t.code,"en-US"]:void 0,{timeZone:e,timeZoneName:n})}(n,t.timeZone,t.locale);return"formatToParts"in o?function(n,e){const t=n.formatToParts(e);for(let n=t.length-1;n>=0;--n)if("timeZoneName"===t[n].type)return t[n].value}(o,e):function(n,e){const t=n.format(e).replace(/\u200E/g,""),o=/ [\w-+ ]+$/.exec(t);return o?o[0].substr(1):""}(o,e)}const wn={year:0,month:1,day:2,hour:3,minute:4,second:5},yn={};function vn(n,e,t,o,r,i,a){const c=new Date(0);return c.setUTCFullYear(n,e,t),c.setUTCHours(o,r,i,a),c}const kn=36e5,Bn=6e4,xn={timezone:/([Z+-].*)$/,timezoneZ:/^(Z)$/,timezoneHH:/^([+-]\d{2})$/,timezoneHHMM:/^([+-])(\d{2}):?(\d{2})$/};function Mn(n,e,t){if(!n)return 0;let o,r,i=xn.timezoneZ.exec(n);if(i)return 0;if(i=xn.timezoneHH.exec(n),i)return o=parseInt(i[1],10),Dn(o)?-o*kn:NaN;if(i=xn.timezoneHHMM.exec(n),i){o=parseInt(i[2],10);const n=parseInt(i[3],10);return Dn(o,n)?(r=Math.abs(o)*kn+n*Bn,"+"===i[1]?-r:r):NaN}if(function(n){if(In[n])return!0;try{return new Intl.DateTimeFormat(void 0,{timeZone:n}),In[n]=!0,!0}catch(n){return!1}}(n)){e=new Date(e||Date.now());const o=t?e:function(n){return vn(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds())}(e),r=Sn(o,n),i=t?r:function(n,e,t){let o=n.getTime()-e;const r=Sn(new Date(o),t);if(e===r)return e;o-=r-e;const i=Sn(new Date(o),t);return r===i?r:Math.max(r,i)}(e,r,n);return-i}return NaN}function Sn(n,e){const t=function(n,e){const t=function(n){if(!yn[n]){const e=new Intl.DateTimeFormat("en-US",{hourCycle:"h23",timeZone:"America/New_York",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}).format(new Date("2014-06-25T04:00:00.123Z")),t="06/25/2014, 00:00:00"===e||"‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00"===e;yn[n]=t?new Intl.DateTimeFormat("en-US",{hourCycle:"h23",timeZone:n,year:"numeric",month:"numeric",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"}):new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:n,year:"numeric",month:"numeric",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit"})}return yn[n]}(e);return"formatToParts"in t?function(n,e){try{const t=n.formatToParts(e),o=[];for(let n=0;n<t.length;n++){const e=wn[t[n].type];void 0!==e&&(o[e]=parseInt(t[n].value,10))}return o}catch(n){if(n instanceof RangeError)return[NaN];throw n}}(t,n):function(n,e){const t=n.format(e),o=/(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(t);return[parseInt(o[3],10),parseInt(o[1],10),parseInt(o[2],10),parseInt(o[4],10),parseInt(o[5],10),parseInt(o[6],10)]}(t,n)}(n,e),o=vn(t[0],t[1]-1,t[2],t[3]%24,t[4],t[5],0).getTime();let r=n.getTime();const i=r%1e3;return r-=i>=0?i:1e3+i,o-r}function Dn(n,e){return-23<=n&&n<=23&&(null==e||0<=e&&e<=59)}const In={},jn={X:function(n,e,t){const o=Tn(t.timeZone,n);if(0===o)return"Z";switch(e){case"X":return Yn(o);case"XXXX":case"XX":return zn(o);default:return zn(o,":")}},x:function(n,e,t){const o=Tn(t.timeZone,n);switch(e){case"x":return Yn(o);case"xxxx":case"xx":return zn(o);default:return zn(o,":")}},O:function(n,e,t){const o=Tn(t.timeZone,n);switch(e){case"O":case"OO":case"OOO":return"GMT"+function(n,e=""){const t=n>0?"-":"+",o=Math.abs(n),r=Math.floor(o/60),i=o%60;return 0===i?t+String(r):t+String(r)+e+Fn(i,2)}(o,":");default:return"GMT"+zn(o,":")}},z:function(n,e,t){switch(e){case"z":case"zz":case"zzz":return Cn("short",n,t);default:return Cn("long",n,t)}}};function Tn(n,e){const t=n?Mn(n,e,!0)/6e4:e?.getTimezoneOffset()??0;if(Number.isNaN(t))throw new RangeError("Invalid time zone specified: "+n);return t}function Fn(n,e){const t=n<0?"-":"";let o=Math.abs(n).toString();for(;o.length<e;)o="0"+o;return t+o}function zn(n,e=""){const t=n>0?"-":"+",o=Math.abs(n);return t+Fn(Math.floor(o/60),2)+e+Fn(Math.floor(o%60),2)}function Yn(n,e){return n%60==0?(n>0?"-":"+")+Fn(Math.abs(n)/60,2):zn(n,e)}function Nn(n){const e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),+n-+e}const Pn=36e5,Ln=6e4,Un=2,Wn={dateTimePattern:/^([0-9W+-]+)(T| )(.*)/,datePattern:/^([0-9W+-]+)(.*)/,plainTime:/:/,YY:/^(\d{2})$/,YYY:[/^([+-]\d{2})$/,/^([+-]\d{3})$/,/^([+-]\d{4})$/],YYYY:/^(\d{4})/,YYYYY:[/^([+-]\d{4})/,/^([+-]\d{5})/,/^([+-]\d{6})/],MM:/^-(\d{2})$/,DDD:/^-?(\d{3})$/,MMDD:/^-?(\d{2})-?(\d{2})$/,Www:/^-?W(\d{2})$/,WwwD:/^-?W(\d{2})-?(\d{1})$/,HH:/^(\d{2}([.,]\d*)?)$/,HHMM:/^(\d{2}):?(\d{2}([.,]\d*)?)$/,HHMMSS:/^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,timeZone:/(Z|[+-]\d{2}(?::?\d{2})?| UTC| [a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?)$/};function On(n,e={}){if(arguments.length<1)throw new TypeError("1 argument required, but only "+arguments.length+" present");if(null===n)return new Date(NaN);const t=null==e.additionalDigits?Un:Number(e.additionalDigits);if(2!==t&&1!==t&&0!==t)throw new RangeError("additionalDigits must be 0, 1 or 2");if(n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n))return new Date(n.getTime());if("number"==typeof n||"[object Number]"===Object.prototype.toString.call(n))return new Date(n);if("[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);const o=function(n){const e={};let t,o=Wn.dateTimePattern.exec(n);if(o?(e.date=o[1],t=o[3]):(o=Wn.datePattern.exec(n),o?(e.date=o[1],t=o[2]):(e.date=null,t=n)),t){const n=Wn.timeZone.exec(t);n?(e.time=t.replace(n[1],""),e.timeZone=n[1].trim()):e.time=t}return e}(n),{year:r,restDateString:i}=function(n,e){if(n){const t=Wn.YYY[e],o=Wn.YYYYY[e];let r=Wn.YYYY.exec(n)||o.exec(n);if(r){const e=r[1];return{year:parseInt(e,10),restDateString:n.slice(e.length)}}if(r=Wn.YY.exec(n)||t.exec(n),r){const e=r[1];return{year:100*parseInt(e,10),restDateString:n.slice(e.length)}}}return{year:null}}(o.date,t),a=function(n,e){if(null===e)return null;let t,o,r;if(!n||!n.length)return t=new Date(0),t.setUTCFullYear(e),t;let i=Wn.MM.exec(n);if(i)return t=new Date(0),o=parseInt(i[1],10)-1,$n(e,o)?(t.setUTCFullYear(e,o),t):new Date(NaN);if(i=Wn.DDD.exec(n),i){t=new Date(0);const n=parseInt(i[1],10);return function(n,e){if(e<1)return!1;const t=qn(n);return!(t&&e>366)&&!(!t&&e>365)}(e,n)?(t.setUTCFullYear(e,0,n),t):new Date(NaN)}if(i=Wn.MMDD.exec(n),i){t=new Date(0),o=parseInt(i[1],10)-1;const n=parseInt(i[2],10);return $n(e,o,n)?(t.setUTCFullYear(e,o,n),t):new Date(NaN)}if(i=Wn.Www.exec(n),i)return r=parseInt(i[1],10)-1,Gn(r)?Hn(e,r):new Date(NaN);if(i=Wn.WwwD.exec(n),i){r=parseInt(i[1],10)-1;const n=parseInt(i[2],10)-1;return Gn(r,n)?Hn(e,r,n):new Date(NaN)}return null}(i,r);if(null===a||isNaN(a.getTime()))return new Date(NaN);if(a){const n=a.getTime();let t,r=0;if(o.time&&(r=function(n){let e,t,o=Wn.HH.exec(n);if(o)return e=parseFloat(o[1].replace(",",".")),Xn(e)?e%24*Pn:NaN;if(o=Wn.HHMM.exec(n),o)return e=parseInt(o[1],10),t=parseFloat(o[2].replace(",",".")),Xn(e,t)?e%24*Pn+t*Ln:NaN;if(o=Wn.HHMMSS.exec(n),o){e=parseInt(o[1],10),t=parseInt(o[2],10);const n=parseFloat(o[3].replace(",","."));return Xn(e,t,n)?e%24*Pn+t*Ln+1e3*n:NaN}return null}(o.time),null===r||isNaN(r)))return new Date(NaN);if(o.timeZone||e.timeZone){if(t=Mn(o.timeZone||e.timeZone,new Date(n+r)),isNaN(t))return new Date(NaN)}else t=Nn(new Date(n+r)),t=Nn(new Date(n+r+t));return new Date(n+r+t)}return new Date(NaN)}function Hn(n,e,t){e=e||0,t=t||0;const o=new Date(0);o.setUTCFullYear(n,0,4);const r=7*e+t+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}const Zn=[31,28,31,30,31,30,31,31,30,31,30,31],Rn=[31,29,31,30,31,30,31,31,30,31,30,31];function qn(n){return n%400==0||n%4==0&&n%100!=0}function $n(n,e,t){if(e<0||e>11)return!1;if(null!=t){if(t<1)return!1;const o=qn(n);if(o&&t>Rn[e])return!1;if(!o&&t>Zn[e])return!1}return!0}function Gn(n,e){return!(n<0||n>52||null!=e&&(e<0||e>6))}function Xn(n,e,t){return!(n<0||n>=25||null!=e&&(e<0||e>=60)||null!=t&&(t<0||t>=60))}const Qn=/([xXOz]+)|''|'(''|[^'])+('|$)/g;function Jn(n,e,t,o){return function(n,e,t={}){const o=(e=String(e)).match(Qn);if(o){const r=On(t.originalDate||n,t);e=o.reduce((function(n,e){if("'"===e[0])return n;const o=n.indexOf(e),i="'"===n[o-1],a=n.replace(e,"'"+jn[e[0]](r,e,t)+"'");return i?a.substring(0,o-1)+a.substring(o+1):a}),e)}return function(n,e,t){const o=W(),r=t?.locale??o.locale??L,i=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,a=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,c=Z(n);if(!mn(c))throw new RangeError("Invalid time value");let d=e.match(pn).map((n=>{const e=n[0];return"p"===e||"P"===e?(0,sn[e])(n,r.formatLong):n})).join("").match(hn).map((n=>{if("''"===n)return{isToken:!1,value:"'"};const e=n[0];if("'"===e)return{isToken:!1,value:bn(n)};if(tn[e])return{isToken:!0,value:n};if(e.match(gn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:n}}));r.localize.preprocessor&&(d=r.localize.preprocessor(c,d));const s={firstWeekContainsDate:i,weekStartsOn:a,locale:r};return d.map((o=>{if(!o.isToken)return o.value;const i=o.value;return(!t?.useAdditionalWeekYearTokens&&function(n){return un.test(n)}(i)||!t?.useAdditionalDayOfYearTokens&&function(n){return ln.test(n)}(i))&&function(n,e,t){const o=function(n,e,t){const o="Y"===n[0]?"years":"days of the month";return`Use \`${n.toLowerCase()}\` instead of \`${n}\` (in \`${e}\`) for formatting ${o} to the input \`${t}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(n,e,t);if(console.warn(o),An.includes(n))throw new RangeError(o)}(i,e,String(n)),(0,tn[i[0]])(c,i,r.localize,s)})).join("")}(n,e,t)}(function(n,e,t){const o=Mn(e,n=On(n,t),!0),r=new Date(n.getTime()-o),i=new Date(0);return i.setFullYear(r.getUTCFullYear(),r.getUTCMonth(),r.getUTCDate()),i.setHours(r.getUTCHours(),r.getUTCMinutes(),r.getUTCSeconds(),r.getUTCMilliseconds()),i}(n,e,{timeZone:(o={...o,timeZone:e,originalDate:n}).timeZone}),t,o)}const Vn=document.getElementById("task-list-container");function Kn(){Vn.innerHTML="";for(let n=0;n<y.length;n++){const e=document.createElement("div");e.classList.add("task"),Vn.appendChild(e);const t=document.createElement("div");t.classList.add("task-top-div"),e.appendChild(t);const o=document.createElement("div");o.classList.add("task-top-left-div"),t.appendChild(o);const r=document.createElement("input");r.type="checkbox",r.id=`task-checkbox${n}`,"not complete"==y[n].status?r.checked=!1:"complete"==y[n].status&&(r.checked=!0),o.appendChild(r),ee(n);const i=document.createElement("p");i.id=`task-title${n}`,i.classList.add("task-title"),i.textContent=y[n].title,"complete"==y[n].status&&i.classList.add("completed"),o.appendChild(i);const a=document.createElement("div");a.classList.add("task-top-right-div"),t.appendChild(a);const c=document.createElement("p");c.classList.add("task-due-date");let d=y[n].dueDate;0!=d.length&&(d=Jn(d,"UTC","dd-MM-yyyy")),c.textContent=d,a.appendChild(c);const s=document.createElement("button");s.id=`task-edit-button${n}`,s.classList.add("task-edit-button"),a.appendChild(s),ne(n);const l=document.createElement("button");l.id=`task-delete-button${n}`,l.classList.add("task-delete-button"),a.appendChild(l),_n(n);const u=document.createElement("p");u.classList.add("task-description"),u.textContent=y[n].description,e.appendChild(u),"low"==y[n].priority?e.style.backgroundColor="rgb(210, 218, 196)":"normal"==y[n].priority?e.style.backgroundColor="rgb(190, 223, 140)":"high"==y[n].priority&&(e.style.backgroundColor="rgb(239, 220, 112)")}}function _n(n){document.getElementById(`task-delete-button${n}`).addEventListener("click",(function(){y.splice(n,1),Kn(),E()}))}function ne(n){document.getElementById(`task-edit-button${n}`).addEventListener("click",(function(){!function(n){if(x.innerHTML="",null==document.getElementById("edit-task-form")){const e=document.createElement("form");e.id="edit-task-form",e.method="get",M.appendChild(e);const t=document.createElement("ul");e.appendChild(t);const o=document.createElement("li");o.id="li1",t.appendChild(o);const r=document.createElement("div");r.id="title-div",o.appendChild(r);const i=document.createElement("label");i.htmlFor="title",i.textContent="Title:",r.appendChild(i);const a=document.createElement("input");a.type="text",a.id="title",a.name="title",a.value=y[n].title,a.required="true",r.appendChild(a);const c=document.createElement("div");c.id="date-div",o.appendChild(c);const d=document.createElement("label");d.htmlFor="due-date",d.textContent="Due Date:",c.appendChild(d);const s=document.createElement("input");s.type="date",s.id="due-date",s.name="due-date",s.value=y[n].dueDate,c.appendChild(s);const l=document.createElement("li");l.id="li2",t.appendChild(l);const u=document.createElement("label");u.htmlFor="description",u.textContent="Description:",l.appendChild(u);const A=document.createElement("textarea");A.id="description",A.name="description",A.rows="3",A.value=y[n].description,l.appendChild(A);const m=document.createElement("li");m.id="li4",t.appendChild(m);const h=document.createElement("fieldset");h.id="priority-fieldset",m.appendChild(h);const p=document.createElement("legend");p.textContent="Priority:",h.appendChild(p);const f=document.createElement("div");f.id="low-prio-div",h.appendChild(f);const g=document.createElement("label");g.htmlFor="low-priority",g.textContent="Low",f.appendChild(g);const b=document.createElement("input");b.type="radio",b.id="low-priority",b.name="priority",b.value="low","low"==y[n].priority&&(b.checked=!0),f.appendChild(b);const C=document.createElement("div");C.id="norm-prio-div",h.appendChild(C);const w=document.createElement("label");w.htmlFor="normal-priority",w.textContent="Normal",C.appendChild(w);const v=document.createElement("input");v.type="radio",v.id="normal-priority",v.name="priority",v.value="normal","normal"==y[n].priority&&(v.checked=!0),C.appendChild(v);const k=document.createElement("div");k.id="high-prio-div",h.appendChild(k);const x=document.createElement("label");x.htmlFor="high-priority",x.textContent="High",k.appendChild(x);const D=document.createElement("input");D.type="radio",D.id="high-priority",D.name="priority",D.value="high","high"==y[n].priority&&(D.checked=!0),k.appendChild(D);const I=document.createElement("li");I.id="li5",t.appendChild(I);const j=document.createElement("button");j.id="submit-button",j.type="button",j.textContent="Submit",I.appendChild(j),function(n){const e=document.getElementById("submit-button");e.addEventListener("click",(function(){const e=B();y.splice(n,1,e),E()})),e.addEventListener("click",S),e.addEventListener("click",Kn)}(n)}}(n)}))}function ee(n){const e=document.getElementById(`task-checkbox${n}`);e.addEventListener("click",(function(){const t=document.getElementById(`task-title${n}`);0==e.checked?(y[n].status="not complete",t.classList.remove("completed"),E()):1==e.checked&&(y[n].status="complete",t.classList.add("completed"),E())}))}Kn();const te=document.getElementById("project-list-container");let oe="";function re(){te.innerHTML="";for(let n=0;n<g.length;n++){const e=document.createElement("button");e.id=`project-button${n}`,e.classList.add("project-button"),e.type="button",e.textContent=g[n].title,te.appendChild(e),ie(n)}!function(){const n=document.getElementById("project-list-container");n.hasChildNodes()&&n.firstElementChild.classList.add("selected-project")}()}function ie(n){document.getElementById(`project-button${n}`).addEventListener("click",(function(){const e=document.querySelector(".selected-project");null==e?(document.getElementById(`project-button${n}`).classList.add("selected-project"),ae(),k(),Kn()):(e.classList.remove("selected-project"),document.getElementById(`project-button${n}`).classList.add("selected-project"),ae(),k(),Kn())}))}function ae(){const n=document.querySelector(".selected-project").id.slice(14);oe=Number(n)}re();const ce=document.getElementById("project-form-container");function de(){ce.innerHTML=""}const se=document.getElementById("task-list-container"),le=document.getElementById("form-container"),ue=document.getElementById("notification-container");function Ae(){le.innerHTML="",ue.innerHTML=""}const me=document.getElementById("new-project-button"),he=document.getElementById("delete-project-button"),pe=document.getElementById("new-task-button");me.addEventListener("click",(function(){if(null==document.getElementById("new-project-form")){const n=document.createElement("form");n.id="new-project-form",n.method="get",ce.appendChild(n);const e=document.createElement("ul");n.appendChild(e);const t=document.createElement("li");e.appendChild(t);const o=document.createElement("label");o.htmlFor="project-title",o.textContent="Title:",t.appendChild(o);const r=document.createElement("input");r.type="text",r.id="project-title",r.name="project-title",r.required="true",t.appendChild(r);const i=document.createElement("li");i.id="project-li2",e.appendChild(i);const a=document.createElement("button");a.id="project-submit-button",a.type="button",a.textContent="Submit",i.appendChild(a);const c=document.createElement("button");c.id="project-cancel-button",c.type="button",c.textContent="Cancel",i.appendChild(c),function(){const n=document.getElementById("project-submit-button");n.addEventListener("click",b),n.addEventListener("click",de),n.addEventListener("click",re)}(),document.getElementById("project-cancel-button").addEventListener("click",de)}})),he.addEventListener("click",(function(){g.splice(w,1),re(),w=0,v(),Kn(),E()})),pe.addEventListener("click",(function(){if(se.innerHTML="",null==document.getElementById("new-task-form")){const n=document.createElement("form");n.id="new-task-form",n.method="get",le.appendChild(n);const e=document.createElement("ul");n.appendChild(e);const t=document.createElement("li");t.id="li1",e.appendChild(t);const o=document.createElement("div");o.id="title-div",t.appendChild(o);const r=document.createElement("label");r.htmlFor="title",r.textContent="Title:",o.appendChild(r);const i=document.createElement("input");i.type="text",i.id="title",i.name="title",i.placeholder="     What should I do? (Required)",i.required="true",o.appendChild(i);const a=document.createElement("div");a.id="date-div",t.appendChild(a);const c=document.createElement("label");c.htmlFor="due-date",c.textContent="Due Date:",a.appendChild(c);const d=document.createElement("input");d.type="date",d.id="due-date",d.name="due-date",a.appendChild(d);const s=document.createElement("li");s.id="li2",e.appendChild(s);const l=document.createElement("label");l.htmlFor="description",l.textContent="Description:",s.appendChild(l);const u=document.createElement("textarea");u.id="description",u.name="description",u.rows="3",u.placeholder="\n     How and Why should I do it? (Optional)",s.appendChild(u);const A=document.createElement("li");A.id="li4",e.appendChild(A);const m=document.createElement("fieldset");m.id="priority-fieldset",A.appendChild(m);const h=document.createElement("legend");h.textContent="Priority:",m.appendChild(h);const p=document.createElement("div");p.id="low-prio-div",m.appendChild(p);const f=document.createElement("label");f.htmlFor="low-priority",f.textContent="Low",p.appendChild(f);const g=document.createElement("input");g.type="radio",g.id="low-priority",g.name="priority",g.value="low",p.appendChild(g);const b=document.createElement("div");b.id="norm-prio-div",m.appendChild(b);const w=document.createElement("label");w.htmlFor="normal-priority",w.textContent="Normal",b.appendChild(w);const v=document.createElement("input");v.type="radio",v.id="normal-priority",v.name="priority",v.value="normal",v.checked=!0,b.appendChild(v);const k=document.createElement("div");k.id="high-prio-div",m.appendChild(k);const x=document.createElement("label");x.htmlFor="high-priority",x.textContent="High",k.appendChild(x);const M=document.createElement("input");M.type="radio",M.id="high-priority",M.name="priority",M.value="high",k.appendChild(M);const S=document.createElement("li");S.id="li5",e.appendChild(S);const D=document.createElement("button");D.id="submit-button",D.type="button",D.textContent="Submit",S.appendChild(D);const I=document.createElement("button");I.id="close-form-button",I.type="button",I.textContent="Finished",S.appendChild(I),document.getElementById("submit-button").addEventListener("click",(function(){""!=document.getElementById("title").value?function(){const n=B();y.push(n),function(){const n=y[y.length-1].title,e=document.createElement("div");e.classList.add("notification-area"),C.appendChild(e);const t=document.createElement("p");t.classList.add("notification-text"),t.textContent=`New task Added: ${n}`,e.appendChild(t),setTimeout((function(){e.style.opacity="0",t.style.opacity="0",setTimeout((function(){e.remove()}),1e3)}),1e3)}(),function(){const n=document.getElementById("title"),e=document.getElementById("description"),t=document.getElementById("due-date"),o=document.getElementById("normal-priority");n.value="",e.value="",t.value="",o.checked=!0}(),E()}():alert("Please input the title of your task")})),function(){const n=document.getElementById("close-form-button");n.addEventListener("click",Ae),n.addEventListener("click",Kn)}()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,